const { Telegraf } = require('telegraf');
const data = require('./data')
const Stage = require('telegraf/stage')
const session = require('telegraf/session')
const Scene = require('telegraf/scenes/base')
const { leave } = Stage
const stage = new Stage()

const bot = new Telegraf(process.env.BOT_TOKEN);

const getName = new Scene('getName')
stage.register(getName)
const getApartmentNumber = new Scene('getApartmentNumber')
stage.register(getApartmentNumber)
const getFloorNumber = new Scene('getFloorNumber')
stage.register(getFloorNumber)
const getDetails = new Scene('getDetails')
stage.register(getDetails)
const getNumber = new Scene('getNumber')
stage.register(getNumber)
const check = new Scene('check')
stage.register(check)

bot.use(session())
bot.use(stage.middleware())


bot.hears('Ô∏è‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', (ctx) => {
  ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ',
    { reply_markup: { remove_keyboard: true } }
  )
  ctx.scene.enter('getName')
})

bot.start((ctx) => {
  ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é',
    { reply_markup: { remove_keyboard: true } }  
  )
  ctx.scene.enter('getName')
})

getName.command('start', async (ctx) => {
  ctx.reply(
    '–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é',
    { reply_markup: { remove_keyboard: true } }
  )
  await ctx.scene.leave('getFloorNumber')
  ctx.scene.enter('getName')
})

getName.on('text', async (ctx) => {
  if (ctx.message.text === '‚óÄÔ∏è –ù–∞–∑–∞–¥') {
    return ctx.reply('–í—ã —É–∂–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ –∏–º—è')
  }

  ctx.session.name = ctx.message.text
  ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã' +
    `\n\n–£–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§.–ò.–û: ${ctx.session.name}`,
    { reply_markup: { keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥']], resize_keyboard: true, one_time_keyboard: true } }
    )
  await ctx.scene.leave('getName')
  ctx.scene.enter('getApartmentNumber')
})

getApartmentNumber.hears(/^[0-9]*$/, async (ctx) => {
  ctx.session.apartmentNumber = ctx.message.text
  ctx.reply(
    '–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ –≤—ã —ç—Ç–∞–∂–∞?' +
    `\n\n–£–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§.–ò.–û: ${ctx.session.name};\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${ctx.session.apartmentNumber}`,
    { reply_markup: { keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ']], resize_keyboard: true, one_time_keyboard: true } }
  )
  await ctx.scene.leave('getApartmentNumber')
  ctx.scene.enter('getFloorNumber')
})

getApartmentNumber.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
  ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è',
    { reply_markup: { remove_keyboard: true } } 
  )
  await ctx.scene.leave('getApartmentNumber')
  ctx.scene.enter('getName')
})

getApartmentNumber.on('text', async (ctx) => {
  ctx.reply(
    '–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã' +
    `\n\n–£–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§.–ò.–û: ${ctx.session.name}`,
    { reply_markup: { keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ']], resize_keyboard: true, one_time_keyboard: true } }
  )
})


getFloorNumber.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
  ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã' +
    `\n\n–£–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§.–ò.–û: ${ctx.session.name}`,
    { reply_markup: { keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ']], resize_keyboard: true, one_time_keyboard: true } }
  )
  await ctx.scene.leave('getFloorNumber')
  ctx.scene.enter('getApartmentNumber')
})

getFloorNumber.hears(['‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ', '/start'], async (ctx) => {
  ctx.reply(     '–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ',     { reply_markup: { remove_keyboard: true } }   )
  await ctx.scene.leave('getFloorNumber')
  ctx.scene.enter('getName')
})

getFloorNumber.on('text', async (ctx) => {
  ctx.session.floorNumber = ctx.message.text
  ctx.reply(
    '–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏' +
    `\n\n–£–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§.–ò.–û: ${ctx.session.name};\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${ctx.session.apartmentNumber};\n–≠—Ç–∞–∂: ${ctx.session.floorNumber}`,
    { reply_markup: { keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ']], resize_keyboard: true, one_time_keyboard: true } }
  )
  await ctx.scene.leave('getFloorNumber')
  ctx.scene.enter('getDetails')
})


getDetails.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
  ctx.reply(
    '–ê —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è' +
    `\n\n–£–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§.–ò.–û: ${ctx.session.name};\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${ctx.session.apartmentNumber}`,
    { reply_markup: { keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ']], resize_keyboard: true, one_time_keyboard: true } }
  )
  await ctx.scene.leave('getDetails')
  ctx.scene.enter('getFloorNumber')
})

getDetails.hears(['‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ', '/start'], async (ctx) => {
  ctx.reply(     '–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é',     { reply_markup: { remove_keyboard: true } }   )
  await ctx.scene.leave('getDetails')
  ctx.scene.enter('getName')
})

getDetails.on('text', async (ctx) => {
  ctx.session.details = ctx.message.text
  ctx.reply(
    '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º.' +
    `\n\n–£–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§.–ò.–û: ${ctx.session.name};\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${ctx.session.apartmentNumber};\n–≠—Ç–∞–∂: ${ctx.session.floorNumber};` +
    `\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è: ${ctx.session.details};`,
    { reply_markup: { keyboard: [[{text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true}], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ']], resize_keyboard: true, one_time_keyboard: true } }
  )
  await ctx.scene.leave('getCompSkills')
  ctx.scene.enter('getNumber')
})

getNumber.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
  ctx.reply(
    '–ö–∞–∫–∏–º–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –∏ –Ω–∞ –∫–∞–∫–æ–º —É—Ä–æ–≤–Ω–µ –í—ã –≤–ª–∞–¥–µ–µ—Ç–µ?' +
    `\n\n–£–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§.–ò.–û: ${ctx.session.name};\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${ctx.session.apartmentNumber};\n–≠—Ç–∞–∂: ${ctx.session.floorNumber};` +
    `\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è: ${ctx.session.details}`,
    { reply_markup: { keyboard: [['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ']], resize_keyboard: true, one_time_keyboard: true } }
  )
  await ctx.scene.leave('getNumber')
  ctx.scene.enter('getCompSkills')
})

getNumber.hears(['‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ', '/start'], async (ctx) => {
  ctx.reply(     '–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ',     { reply_markup: { remove_keyboard: true } }   )
  await ctx.scene.leave('getNumber')
  ctx.scene.enter('getCompSkills')
  ctx.session = null
})

getNumber.on('contact', async (ctx) => {
  ctx.session.phone = ctx.message.contact.phone_number
  ctx.reply(
    '‚ùóÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–í—Å–µ –≤–µ—Ä–Ω–æ", –µ—Å–ª–∏ –æ–Ω–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: ' + 
    `\n\n–§.–ò.–û: ${ctx.session.name}\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${ctx.session.apartmentNumber}\n–≠—Ç–∞–∂: ${ctx.session.floorNumber}` + 
    `\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è: ${ctx.session.details};` +
    `\n–ù–æ–º–µ—Ä: ${ctx.session.phone}`,
    { reply_markup: { keyboard: [['Ô∏è‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ'], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ']], resize_keyboard: true, one_time_keyboard: true }, parse_mode: 'markdown' }
  )
  await ctx.scene.leave('getNumber')
  ctx.scene.enter('check')
})

check.hears('Ô∏è‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ', (ctx) => {
  ctx.reply(
    '‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —á–∞—Ç',
    { reply_markup: { keyboard: [['Ô∏è‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é']], resize_keyboard: true, one_time_keyboard: true } }
  )
  ctx.scene.leave('main')

  for (let key of data.admins) {
    bot.telegram.sendMessage(
      key,
      `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É! \n\n–§.–ò.–û: [${ctx.session.name}](tg://user?id=${ctx.from.id});\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${ctx.session.apartmentNumber};\n–≠—Ç–∞–∂: ${ctx.session.floorNumber};` + 
      `\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è: ${ctx.session.details}` +
      `\n–ù–æ–º–µ—Ä: ${ctx.session.phone}`,
      { parse_mode: 'markdown' }
    )
  }
  ctx.session = null
})

check.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async (ctx) => {
  ctx.reply(
    '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º.' +
    `\n\n–£–∂–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–§.–ò.–û: ${ctx.session.name};\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: ${ctx.session.apartmentNumber};\n–≠—Ç–∞–∂: ${ctx.session.floorNumber};` +
    `\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è: ${ctx.session.details}`,
    { reply_markup: { keyboard: [[{text: 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true}], ['‚óÄÔ∏è –ù–∞–∑–∞–¥', '‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ']], resize_keyboard: true, one_time_keyboard: true } }
  )
  await ctx.scene.leave('check')
  ctx.scene.enter('getNumber')
})

check.hears(['‚ùå –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ', '/start'], async (ctx) => {
  ctx.reply(     '–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í–≤–µ–¥–∏—Ç–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ',     { reply_markup: { remove_keyboard: true } }   )
  await ctx.scene.leave('getNumber')
  ctx.scene.enter('getCompSkills')
  ctx.session = null
})


module.exports.handler = async function (event, context) {
    const message = JSON.parse(event.body);
    await bot.handleUpdate(message);
    return {
        statusCode: 200,
        body: '',
    };
};